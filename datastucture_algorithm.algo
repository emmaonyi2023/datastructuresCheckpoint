//PROBLEM ONE
//=============


   ALGORITHM SUM_DISTINCT_ELEMENTS

VAR
   //declare variables
   mergedArr, distinctArr, arr1, arr2: ARRAY_OF type[n];
   i, j, val, sum := INTEGER;
   
BEGIN

   FUNCTION sumOfDistinct(arr1, arr2) {
 
  // merge the given arrays
  num = arr1.length + arr2.length;
  mergedArr = [];
  j = 0;
  FOR i FROM 0 TO num-1 STEP i++)
    IF (i > arr1.length-1) THEN
      mergedArr.push(arr2[j]);
      j++;
    ELSE 
      mergedArr.push(arr1[i]);
    END_IF
  END_FOR
  
  // find the distinct values
  distinctArr = [];
  FOR i FROM 0 TO mergedArr.length-1 STEP i++ DO
    val = 0;
    FOR j FROM 0 TO mergedArr.length-1 STEP j++ DO
      IF (mergedArr[i] == mergedArr[j]) THEN
        val++;
      END_IF
    IF (val === 1) THEN
      distinctArr.push(mergedArr[i]);
    END_IF
  END_FOR
  
  // sum up the distinct values
  sum = 0;
  FOR i FROM 0 TO distinctArr.length-1 STEP i++ DO
    sum += distinctArr[i];
  END_FOR
  
  // return the sum
  return sum;

  WRITE("The sum of the distinct numbers is: ", sumOfDistinct([3,1,7,9], [2,4,1,9,3]));
      
  END




//PROBLEM   TWO
//=============

ALGORITHM CAL_DOT_PRODUCT

VAR
   //declare variables
   vector1, vector2, dotProduct: ARRAY_OF type[2];
   i, j, dotProduct := INTEGER;
   
BEGIN
 
  FUNCTION dotProduct(vector1, vector2)
  // Function to calculate the dot product of two vectors
  
  dotProduct = 0;

  FOR i FROM 0 TO vector1.length-1 STEP  i++ DO
    dotProduct += vector1[i] * vector2[i];
  END_FOR

  // return the dotProduct
  return dotProduct;

  WRITE("The dotProduct is: ", dotProduct([3,1], [9,3]));
      
  END
